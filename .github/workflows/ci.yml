name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  validate:
    runs-on: ubuntu-latest
    name: Validate Configuration
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Validate docker-compose.yml
      run: |
        docker compose config
        
    - name: Check shell scripts syntax
      run: |
        for script in scripts/*.sh; do
          bash -n "$script"
          echo "✅ $script syntax is valid"
        done
        
    - name: Test environment file
      run: |
        if [ ! -f .env.example ]; then
          echo "❌ .env.example file is missing"
          exit 1
        fi
        echo "✅ .env.example file exists"
        
    - name: Lint shell scripts with shellcheck
      uses: ludeeus/action-shellcheck@master
      with:
        scandir: './scripts'
        
  test-deployment:
    runs-on: ubuntu-latest
    name: Test Deployment
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create .env file
      run: |
        cp .env.example .env
        sed -i 's/your-secure-password-here/test-password-123/g' .env
        sed -i 's/generate-a-secure-password-here/test-db-password-456/g' .env
        
    - name: Start services
      run: |
        docker compose up -d
        
    - name: Wait for services to be healthy
      run: |
        echo "Waiting for services to be healthy..."
        timeout 300 bash -c 'until docker compose ps | grep -q "healthy"; do sleep 10; done'
        
    - name: Check services status
      run: |
        docker compose ps
        
    - name: Test n8n endpoint
      run: |
        # Wait a bit more for n8n to fully start
        sleep 30
        
        # Test if n8n is responding
        curl -f -u admin:test-password-123 http://localhost:5678/healthz || {
          echo "❌ n8n health check failed"
          docker compose logs n8n
          exit 1
        }
        echo "✅ n8n is responding correctly"
        
    - name: Test database connection
      run: |
        docker compose exec -T postgres pg_isready -U n8n -d n8n || {
          echo "❌ Database connection failed"
          docker compose logs postgres
          exit 1
        }
        echo "✅ Database is accessible"
        
    - name: Show logs on failure
      if: failure()
      run: |
        echo "=== n8n logs ==="
        docker compose logs n8n
        echo "=== postgres logs ==="
        docker compose logs postgres
        
    - name: Cleanup
      if: always()
      run: |
        docker compose down -v
        
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
